// Package order provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package order

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Submit order
	// (POST /orders)
	CreateOrder(c *gin.Context)
	// Get order by id
	// (GET /orders/{orderId})
	GetById(c *gin.Context, orderId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateOrder(c)
}

// GetById operation middleware
func (siw *ServerInterfaceWrapper) GetById(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId string

	err = runtime.BindStyledParameter("simple", false, "orderId", c.Param("orderId"), &orderId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetById(c, orderId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/orders", wrapper.CreateOrder)

	router.GET(options.BaseURL+"/orders/:orderId", wrapper.GetById)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWbWvjRhD+K8u0kC/KSfYlbdA3p/eCyzU9mkChwR820kTeq7Sr7I7cE8b/vcyu/CaJ",
	"xLTXUsqBwdq3Z595ZuaR1pCZqjYaNTlI1+CyJVbSP/5gURL+bHO0b8jwTG1NjZYU+vWscWQqtPOcR/hZ",
	"VnWJkE6S6eXV9xFU8vMH1AUteSqCSundMAJqa4QUHFmlC9hEUCodUBVh5R++tfgIKXwT7wnGHbvYk/qg",
	"NDKxzQ5OWitbiKDR6qnBeUAi2+Bmv8c8fMKM+NBba40dCcvkeBzQCN0cSarSHe27h5+Uc0oXwlihDYmV",
	"LFUu3iksc3H2yH83ssLJGUSn7ZyewSLaCzIg8WLUEVTonCyK44BgpgVy8EI5YbKssRZzGES5icDiU6N4",
	"Mb0PumwRkZkNFH2mVnwtvZHUYzJNpsn5JDmfXN4lSep/v0EEj8ZWkiCFnE+M6P9M7f3XSi8CR5Ka41qB",
	"GnXO94+pPq7r9s6BtrU1eZNRTwr4GKYncKTH65f1eGqkJkVtvwl2SVGavrvYM1easEA7Rp2Dx6yxitpb",
	"1i8QfkBp0c4aJrAdvduC//jrHUTBhhgprO4vWxLVsGFgpR9N6FdNMiNI174vXWZVTcpoSINu4hbtSmUo",
	"zsUvb2/vxOzjnOEUeZWe2bJC6wLO5FXyKmFpTI1a1gpSeO2nIqglLX1QsWGkkBDjmE6PzG3zUCkSGv8Q",
	"fit4OCt5mXN36LcQWg8dXZu83UaJ2sPKui5V5s/Fnxxjb237pdrtObqX8ZjkzQG7ffN3dWzR1Ua7kMRp",
	"MvkXeYU0BRfJORMXSXLC9bvy9bauMs44n/QGTrIolfnHfLuzXr4BrmUuuoRGoi5ROhTZErPfhdS8Qrbl",
	"oE5TK7y3RkQ68ZaLkzI3Lt0EjgO7MSRkQ0vUxAAhN38zDMac9TEv/3K+L32+D0nPtGDPslqWwqFd4dGL",
	"cCfdl0rLvHcXdhsjcE1VSdvuzWHbeiQLx4UZxgve2/lLvPb/83zDfAocMZr32AGJh1aofOAz75Gu23nu",
	"zcvKCsnb1v16tOX8PsVjdjqIQEvvyx2LgU0cqtV/sy0GFpJ8MQt50Ty+msZX0/ifmcaw0Qe+cfAB5lv8",
	"8NPrfsEdGfCDATS27D6x0jguTSbLpXGUXiVXSSxrFa8mwEe6W0YNw/UswsFmsfkzAAD//0a3O/5lDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
