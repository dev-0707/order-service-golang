// Package controllers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package proximity_channel

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Servizio check coupon
	// (POST /check/coupon)
	CheckCoupon(c *gin.Context, params CheckCouponParams)
	// Check garanzia
	// (POST /check/garanzia)
	CheckGaranzia(c *gin.Context, params CheckGaranziaParams)
	// Check garanzia deferred
	// (POST /check/garanzia-deferred)
	CheckGaranziaDeferred(c *gin.Context, params CheckGaranziaDeferredParams)
	// Verifica codice IBAN
	// (POST /check/iban)
	CheckIban(c *gin.Context, params CheckIbanParams)
	// Check modulo
	// (POST /check/modulo)
	CheckModulo(c *gin.Context, params CheckModuloParams)
	// Check targa
	// (POST /check/targa)
	CheckTarga(c *gin.Context, params CheckTargaParams)
	// Crea cliente
	// (POST /clienti)
	CreaCliente(c *gin.Context, params CreaClienteParams)
	// Aggiorna cliente
	// (PUT /clienti/{codiceCliente})
	AggiornaCliente(c *gin.Context, codiceCliente int64, params AggiornaClienteParams)
	// Recupera informazioni cliente tramite codice identificativo
	// (GET /clienti/{codiceFiscale})
	GetByCodiceFiscale(c *gin.Context, codiceFiscale string, params GetByCodiceFiscaleParams)
	// Attivazione contratto
	// (POST /contratti)
	AttivazioneContratto(c *gin.Context, params AttivazioneContrattoParams)
	// Processa notifica ricezione contratto
	// (POST /contratti/firmati)
	GetFirmaContratto(c *gin.Context, params GetFirmaContrattoParams)
	// Ricerca contratto tramite codice identificativo
	// (GET /contratti/{id})
	GetDettaglioContratto(c *gin.Context, id int64, params GetDettaglioContrattoParams)
	// Aggiungi dispositivo telepass
	// (POST /contratti/{id}/dispositivi)
	AggiungiTelepass(c *gin.Context, id int64, params AggiungiTelepassParams)
	// Effettua disattivazione dispositivo telepass
	// (POST /contratti/{id}/dispositivi/disattivazione)
	DisattivaTelepass(c *gin.Context, id int64, params DisattivaTelepassParams)
	// Effettua sostituzione dispositivo telepass
	// (POST /contratti/{id}/dispositivi/sostituzioni)
	SostituisciTelepass(c *gin.Context, id int64, params SostituisciTelepassParams)
	// Attivazione opzioni per un titolo
	// (POST /contratti/{id}/opzioni)
	AttivaOpzioni(c *gin.Context, id int64, params AttivaOpzioniParams)
	// Effettua disattivazione opzione
	// (POST /contratti/{id}/opzioni/disattivazione)
	DisattivaOpzione(c *gin.Context, id int64, params DisattivaOpzioneParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CheckCoupon operation middleware
func (siw *ServerInterfaceWrapper) CheckCoupon(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckCouponParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CheckCoupon(c, params)
}

// CheckGaranzia operation middleware
func (siw *ServerInterfaceWrapper) CheckGaranzia(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckGaranziaParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CheckGaranzia(c, params)
}

// CheckGaranziaDeferred operation middleware
func (siw *ServerInterfaceWrapper) CheckGaranziaDeferred(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckGaranziaDeferredParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CheckGaranziaDeferred(c, params)
}

// CheckIban operation middleware
func (siw *ServerInterfaceWrapper) CheckIban(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckIbanParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CheckIban(c, params)
}

// CheckModulo operation middleware
func (siw *ServerInterfaceWrapper) CheckModulo(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckModuloParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CheckModulo(c, params)
}

// CheckTarga operation middleware
func (siw *ServerInterfaceWrapper) CheckTarga(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckTargaParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CheckTarga(c, params)
}

// CreaCliente operation middleware
func (siw *ServerInterfaceWrapper) CreaCliente(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreaClienteParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreaCliente(c, params)
}

// AggiornaCliente operation middleware
func (siw *ServerInterfaceWrapper) AggiornaCliente(c *gin.Context) {

	var err error

	// ------------- Path parameter "codiceCliente" -------------
	var codiceCliente int64

	err = runtime.BindStyledParameter("simple", false, "codiceCliente", c.Param("codiceCliente"), &codiceCliente)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codiceCliente: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AggiornaClienteParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AggiornaCliente(c, codiceCliente, params)
}

// GetByCodiceFiscale operation middleware
func (siw *ServerInterfaceWrapper) GetByCodiceFiscale(c *gin.Context) {

	var err error

	// ------------- Path parameter "codiceFiscale" -------------
	var codiceFiscale string

	err = runtime.BindStyledParameter("simple", false, "codiceFiscale", c.Param("codiceFiscale"), &codiceFiscale)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codiceFiscale: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetByCodiceFiscaleParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetByCodiceFiscale(c, codiceFiscale, params)
}

// AttivazioneContratto operation middleware
func (siw *ServerInterfaceWrapper) AttivazioneContratto(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AttivazioneContrattoParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AttivazioneContratto(c, params)
}

// GetFirmaContratto operation middleware
func (siw *ServerInterfaceWrapper) GetFirmaContratto(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFirmaContrattoParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetFirmaContratto(c, params)
}

// GetDettaglioContratto operation middleware
func (siw *ServerInterfaceWrapper) GetDettaglioContratto(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDettaglioContrattoParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetDettaglioContratto(c, id, params)
}

// AggiungiTelepass operation middleware
func (siw *ServerInterfaceWrapper) AggiungiTelepass(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AggiungiTelepassParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AggiungiTelepass(c, id, params)
}

// DisattivaTelepass operation middleware
func (siw *ServerInterfaceWrapper) DisattivaTelepass(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DisattivaTelepassParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DisattivaTelepass(c, id, params)
}

// SostituisciTelepass operation middleware
func (siw *ServerInterfaceWrapper) SostituisciTelepass(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SostituisciTelepassParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SostituisciTelepass(c, id, params)
}

// AttivaOpzioni operation middleware
func (siw *ServerInterfaceWrapper) AttivaOpzioni(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AttivaOpzioniParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AttivaOpzioni(c, id, params)
}

// DisattivaOpzione operation middleware
func (siw *ServerInterfaceWrapper) DisattivaOpzione(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DisattivaOpzioneParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Telepass-Id-Gestore" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Gestore")]; found {
		var XTelepassIdGestore IdGestore
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Gestore, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Gestore", runtime.ParamLocationHeader, valueList[0], &XTelepassIdGestore)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Gestore: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdGestore = XTelepassIdGestore

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Gestore is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Ente-Responsabile" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Ente-Responsabile")]; found {
		var XTelepassIdEnteResponsabile IdEnteResponsabile
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Ente-Responsabile, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Ente-Responsabile", runtime.ParamLocationHeader, valueList[0], &XTelepassIdEnteResponsabile)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Ente-Responsabile: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdEnteResponsabile = XTelepassIdEnteResponsabile

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Ente-Responsabile is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Telepass-Id-Postazione" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Telepass-Id-Postazione")]; found {
		var XTelepassIdPostazione IdPostazione
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Telepass-Id-Postazione, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Telepass-Id-Postazione", runtime.ParamLocationHeader, valueList[0], &XTelepassIdPostazione)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Telepass-Id-Postazione: %s", err), http.StatusBadRequest)
			return
		}

		params.XTelepassIdPostazione = XTelepassIdPostazione

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Telepass-Id-Postazione is required, but not found: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DisattivaOpzione(c, id, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/check/coupon", wrapper.CheckCoupon)

	router.POST(options.BaseURL+"/check/garanzia", wrapper.CheckGaranzia)

	router.POST(options.BaseURL+"/check/garanzia-deferred", wrapper.CheckGaranziaDeferred)

	router.POST(options.BaseURL+"/check/iban", wrapper.CheckIban)

	router.POST(options.BaseURL+"/check/modulo", wrapper.CheckModulo)

	router.POST(options.BaseURL+"/check/targa", wrapper.CheckTarga)

	router.POST(options.BaseURL+"/clienti", wrapper.CreaCliente)

	router.PUT(options.BaseURL+"/clienti/:codiceCliente", wrapper.AggiornaCliente)

	router.GET(options.BaseURL+"/clienti/:codiceFiscale", wrapper.GetByCodiceFiscale)

	router.POST(options.BaseURL+"/contratti", wrapper.AttivazioneContratto)

	router.POST(options.BaseURL+"/contratti/firmati", wrapper.GetFirmaContratto)

	router.GET(options.BaseURL+"/contratti/:id", wrapper.GetDettaglioContratto)

	router.POST(options.BaseURL+"/contratti/:id/dispositivi", wrapper.AggiungiTelepass)

	router.POST(options.BaseURL+"/contratti/:id/dispositivi/disattivazione", wrapper.DisattivaTelepass)

	router.POST(options.BaseURL+"/contratti/:id/dispositivi/sostituzioni", wrapper.SostituisciTelepass)

	router.POST(options.BaseURL+"/contratti/:id/opzioni", wrapper.AttivaOpzioni)

	router.POST(options.BaseURL+"/contratti/:id/opzioni/disattivazione", wrapper.DisattivaOpzione)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd627cOJZ+FUK7QM9gK7FKVS5fAAPrOIlRs+2J2/b29qARGLTEqmJHItUk5W0nMLCv",
	"sf/257xHv8k+yYCkLpRE3crlJD3RAAN0yrycc3j48dxIfXJ8GsWUICK4c/zJiSGDERKIqX/h4A0R6Arx",
	"mBIO73CI5K8B4j7DscCUOMfOMgABCsP//5//lW2B2Rj8CXKO1gQKCgIIblCIYsj5n52Jg2XXDYIBYs7E",
	"ITBCzrHz04usyYtl8EIO96I098Rh6NcEMxQ4x4IlaOJwf4MiqIlawSQUzrHjus7EEQ+xHJELhsnaeXyc",
	"ODg4R1xQ1s1C2u5p1GeTtdFsI/KScgE/YkosdJ7RAPsI4AARgVfYhwLfU0k6uEyIpBKDKywwo/1INKYa",
	"QuVj9kelIqfrNaaMwLMQIyIU0TGjMWICI9XAR2GYhFDL/V8ZWjnHzr/sFVq3lw62d5Y3fJw4Pl0TGqk+",
	"6DcYxVLznCvKOXYmTgR/+x6Rtdg4xzN34kSYZP+c1lZ+4qAI4rBr8jeq0ePEWVEWwds1ThgOsA/LBFy+",
	"Lc++X5rcs0yOSYAZ/viRdhGwzBs+Tpw66+c44SiO0WDuGVzLFb7l1McwrIx6+hEjEkBwzcLywIvywHPb",
	"hkp/oXe/IF/IqaQqJGSNMx2r6wLkHPsJ00p3C4XA92UJr2DIUT70HaUhgkTrg1T9WxhLgBK01Gk69WbT",
	"6f7iwMJ+2s8vtLPgHhOxmBdYgYlAa8R0rySWO85sTYODxd/45j/Kgpq6/VXglscowPne7q0NArL1RnXB",
	"AkW8q+8NZGvoFAsEGYMP6t84LgvOEWE8HarRcpRbGudsPGW0RxN3fq4uVn3VtSyg896mfWmja8oFFgnW",
	"SlLWP5JEiNHbiAZJWNEhbzbfXxwcHrlTr5+yK+VVUjijRDAobBO2qN9scTibLw6PUsgRHQqpxmE46ERR",
	"1fJq+Vp3IxwRjnvrzpnuQGvqM3ESgn9N0FKPIs+Ix4kTUD+JEBH0Vp9JAnZN8Drrscw6yB1yByubbXmz",
	"f3jtzlzXc2feoXuwfzDzZkcHh7N5RcNm85KK7VsUtnnRnaVbrHtlX3tlZLXthG23s9xAUCpJwirny6nT",
	"tOF8yAS8jeEaKumVu52dtW27adOYMaMBTdW2bGis4AlYwQiHDxNAVicE/Xf6T2diTPv2dDh2CBr218Yb",
	"2byfLnYhSZnh6iJYNTkn19hH79uR4J2CRbzFwaeNrsZzL2Y0or0gt8eBlI4ptHTN8TxvNp/1BKQdnpDN",
	"R8rlqdMLjc9MI7Nqf7LUWKb9TA2NF2U6/m12NMv/V+Fv0bHbKqqZDj8pEWbTq7MN8j+c5XK2Hyy7XIZc",
	"LyTemGdaMfYKDt3y5qAWjXOgGDpizHBE7ZagfRc1YIMWXW28JjlYWWlct3PIIPmIYePKrTD3a/b4xcXF",
	"+fm5u3+9mJ8fHiwu2zVt2ixuE9orgN26Qs3H0qDjZYfe285cIbsWZMuQTlQXYIN8Ch47VeA1WiGmZv3c",
	"qvAHXoQO2S5Ti7EsT5sduXB/cvfn3uF0OnWnrvqftvlaHd5OytVUjeRd5LZmb3cgM0SHuANWk3aZm7TT",
	"oSatfXXSWRqZ1f5mjVeR/dzDV61M3Ozk7TzK1Lkeg/wzYyeXDep3d3chXkNBGaaAI6CGBHmUCcSIcUog",
	"WGGOfViysn/66aeLi4tD99Sdvj44PLp0nnerB1DAWwK5nzpzOfMB1IZ0LbwWIuIXB+UgXzM9Wvs5m7uM",
	"46XifpuJe1dxO2XgwzCVnbErBQyxdaIdhvpiyKTjcpv6FoM00FQ5IxaybUCRq4Bi3WNGnFfw6sLaTlQt",
	"O+cKranatsPPFGNRiq2SnzVVRTHXPqOkBYrOGIJiO6jvAy3tfq2VrjwA1EQTvMN1/bhkiMsxpW5oC5dB",
	"wrXDCn7/Owiw+hm8phH2cYjTvyCQxySAT4n8vzKaysw2W50wkRr58WPqGa9Ft+bWqJNzYkQQSAgFAcLg",
	"HoaUYcDROpG+/DG4zGmsMYAJ8CFXuRMpqoyt1QoJkUABNVeQCSibnDEUYD0MupP/sSQCsUzDkMn4wexw",
	"Kp3pnpynob2BrDcujEmJ585m3tSd7c9n7ny+f3jYTBTH0Koau9AMKcM+mrGBfHMba0uuLo5MGjFi1Rmz",
	"WZAkydcrVTpKl4uHD3fvfvzr0d/WP/7l4TC8mN58uH6Dlj/8Sn84X51/j5bU+2HeFIML6RpDHYh7rpVy",
	"XvUMd2Rh2oYtXqcvCsAJiCD7gAQma6AgDgmBJyBm4ATEjK5wqAmaADEFJwBwxO7xR0xBhCIKphMgPHBS",
	"+dUrUR8FNtmp3Yi29dOdfAA72G0Tep96M/foaD7EsrPHQ+RA7rCBsAIM+lR6rKZ/YflPh0ez04ET8URT",
	"WBmQZhyh04JUPfwNTnjfHhEUDPs0rMYp5vuLhXdwaO1CA2UClGPobZbdRdojPzyUuYb9DzqZbk68fslS",
	"Y7vZlGmb6lo2KtvDaa6uPTwe1zuVQj9dvS+ztg12RqasVbWrakt11TO2zZWyLkHrnu4yrZq25FONq3zc",
	"VureYjl6T/L6b+wiRtrjgMmzFuAE/OfZjdMTQayh3TvI0cJ6+NUSaFtRZo/65+0qO/mm086vdJ/0XD6G",
	"4PMEEfr5/tJs0c4+0s7+pmwAnF9dX6cBqsX86MtG/Z6xcGb2XIUzjQ74TZkAr5OAL+KYm+qRibKiIcub",
	"qecdzg9m3sLzPG+4hlgc+A6KOF2vpbGoLOyUGSCZmdhqia6+f1podZCHbtvjr5EQcB1i2mIdwiJpextg",
	"HlOOBb6nt1DVMMn/7JmeNWboHezShyVXC5CSYMJgt8GUE9w/2va6YHJwcUdK6jbJNtsgptis64e5sTyn",
	"RqLPetBasor784MD193aAmhJ7pVpe1fkrK2kWXPa031vsX/gDErMS7fdG2B+FyT2VSjd5bZUqFCqq23I",
	"l28jwVwRd14nYa8PzFMrAyQuOy0WBwfbVkO0TGriTcww8XFcDaQ2sRliLmCqVv33fqam/fZ9f48l35pZ",
	"r0pQq98g5S67qne089bXrerQ6wZ2bQWLmSOkZrbuh1pFXG1XqD3NcAi5j2l/l5r7MEDkY880DhGoNIdR",
	"XkajhFg7hdTXHp294xWN7DkPaIHFLSy0eqFOuutsfrgPCe+llHnDDh+loTap1UfJi3/KS1oVv02yhdiq",
	"y2syZ9OwN5kd368wqgl7cnegFvf494BGmGD60qeR6YPqHmVr2Stbg7MuEWZjdFVLvWGMMtQWEC2UxLZh",
	"Mpuxovowiin4LjVJvwMRJD4kAgEKCCXgHoY4ULctMqCqe7ndoBQhzqXdWZn7GoPf/w7uEUvZBgkBSHPZ",
	"LwdmlxO3Vkaj7GejjuyDNY5mEtsjVK3may1ly2sb+x9ol0U5ZM/i0BpdS9O/rKgMjCsWm+tO3dZyOmuG",
	"C4uqF3qBQ0hoq//oWZWTyA1mQ83MJwUWF3/R7ZmWvOxi1B8xBBK8wXReH7INzq33ldK/65SzoGB5/Q7A",
	"MN7ASvpg+AkQM3ov7afOhAwNVWgqoyRPxxtLsxw2ebWqM8dmM3usVWCiNMq2Gesh5p74ZWqiVWGkKCzq",
	"4lNyj4gWQhwmvFLY18NTr/HQ4QNZjmfr+ayOtBXu67DI1phIFnu1r1YYd9l/ucXcwrGu+7bZazu8ZnJZ",
	"KvzuFLBz8/3l1Jvt7ztDtKKYBExtHXsvy8AV6XmEXJumW1UERCCSCHq7YjSN6VYxKG0BVjhU6f4Mhl5l",
	"AW8zgbn5ZXV3v/lltTk5sXvo2XwMCUafe7oIR+hW/trI3tt0dDVbZgbKH/6E+EsQB6s/l2aMg1X7PA1s",
	"7WKamo1SWToLu3WB12m14Wp6B6wjfvTUYANJ6H1DIfrhket6s9l8OiSn23HJoyl4cY98f4Np091I1/W+",
	"uhsd25+zTTw3LYpVO0qxiz6wOt/+xJ3u4Ii1xUl6HbfzFlEP4uJabvpAwppALMIEAYZjhrnAVXN2ewY7",
	"aznKvLm74g0TAIVAXBV4SXsgRAJmDvtTOWsojs6U9dkCIc6bt7P5bF65q3RQGmrR/6pSmVzbpsoufetL",
	"4H0XcVBlyQ7NqpvU+miisEt7ek4xTKUb7uc0Ku7b7EpmT2qGWOrW6FYLLTFDEU6i/sRcGmUq3dS8uxpE",
	"DWUBJpCpqFkverLw/1eRjRhuB+zw5G5OTtTZTIPgBpdlq9GdggDLoe8SLOgEuB44UXGz8q8zcAJ4BBnD",
	"gu6x5A6qX+dA3a+ulHAWv9VtjudNG7TwCaMTIFL8AyiROkQnAApwArJO+d/LOfMLZxfXYUsJV/v65eKx",
	"PqpQYq+O7qpy308YFg/XUnp6d9whyBA7TaQmZf96m6H4X/7rxknfiVFKo/5aEL8RItZPyWCyopknB33h",
	"HH/KN3ZRf0x/wxEWD+BsAwlBIXgBrt5c34DTy6W+pZ15sW3N7hHjejzv5dHLmRQ0jRGBMXaOndlL96Xr",
	"TJwYio1ibs/fIP/DXrG1YsottenXWTWsag7yO6WqlFy2WQbSKTTCn5PSE0s/23W0aLJXPFv0OOnRuPZe",
	"U69exktAj++1PiEuXtHgoXCyFfcwjkP17hAle79wLZnipaDWAghDBo9lpU03GdNka+XyXHdnU9dC0Gr+",
	"it+u1o/hhPtYJzTnvSjI92ZxbqmepUC5c4X9DUZcQIAYgwJOQMzQmiojmt6ndWQ9mdEZAAsLvSaZu9Ot",
	"uZo2ciUxHapaUDkS3C03lsH3t16b/draNKdZnmOR9F9UFX1af8KTKILsoQVMBFxz5fvKn533slMKT2vz",
	"lrkVoH5M+QJpU3U3IiEgQNqRkwwXr2RYYCu/yP5NA1cuhS8BXVa8kp4FDUMKEEfrZEeYZWRBi9SnWd3a",
	"nAEd4W6Eu2Fwp4/cdYEv3Tj3IjDfUngq4AFMpDpjxKC00xldURLoW6ItQJg/5zACoimNrwYYlVbtEhRH",
	"ZBuR7SnIBoICMZohLnu7xI5qxXGv4qQhyh6sXb46/SuIIeeSYf0rBDyBABM/TFTWFFAQIUIBUX+7C6H/",
	"4UWIuVBXpZU8MZDD2GFPvbTyTUOdksA3Z/dJjRitvRETd4WJuV2mqc0QpxkQizRPh6HnbxDAIdDZIaC7",
	"SZgkWD3cHebmHsdydsaQUFgZIxZJvZcGoo7tMyTlYz75ZgHEi+wK7DcMiakMRptvxLcR30ybL78f34xr",
	"+btodli71Kik3Fat0QwBrEGJhiFODUAs/66OYyx+/7/U7lNDp9DX4MXqrNc3DV7Zm3Mjdo3YNWJXgV0i",
	"hQYrdCkTCrc4qAyltfU63KbK8MxA2530JEAABa4Dk/EmwzeLTIYMLKv3Tl3AN1M1XdA13R1ppYfubBCW",
	"rrKfttipP/pz7ztYgxIW70ecHHFyME4yBI0tmANl9hqjCZV7nzRL6eZ4VNCZWJAz+4BSYxq2+oWlGkSq",
	"Tz3FUGyKDz2V5m79ulOPJxK+GRCuSrqXjTi3HIYpIMJ0vNGu+9rxaq6XcSsu5hUustXPLrup+YSUWPpS",
	"whMZycavDPvPCbkWdOwFu2/18a9gd40ssHuF/ETCLMBEQaC6gJwbrILBCEuTxvbFvRpCnyPx6uHMnLcO",
	"0n2+5Ffw2AjpxfgDPiv4lQL4M7naLWb0Wb68+bYZ8asJv/RzzkpPU2MafHd6mqHaq8vvRmB7ArA9DX8a",
	"MNB8g9/up+tLy0WOQ7vmHAEYqocb69an7Tt336qXbhVGLytxh+545XnUpiSxWt3dueSj9Tl6ywNNt2Kz",
	"lHKqOXYVjwCW0WtvpZ7WbUGxS0Z9yTNg2Efp4yKyDwjwGgttH9VMNPVg74hhtQeMe+GXZ7Ggc5WGvo+E",
	"yE2REWhGoPmcQJOjAaHaSDJgYRjwfMJBm8eoPyzMpUGmMhnq0+uFKYVURZ3xOCvI3jzFNjyyPFO7nddo",
	"dLf4jTj4J43/PZP7aFkWiz7mrQzxj96kxZv8LBBeGLzKPf1GPEjsI+abvlxvr7EVAPcqz0s3OJLpx/4N",
	"vCtdcq7nMGTrm6LBiHRfONNRWo/P7MTWXgux6L7pP6QXc0cDczQwv1ASog3rhuPqXlB6R74ZZt+kH6ID",
	"5Q5WSprhN3+1fsTfrwN/Gz5xsG3CeYTFERY/PywOwabtUJIX7zjiHhhpNB+KkOmLkZj7o436lWCk9RHP",
	"z2ynZvNm6jFaqiMk/yEguRMK+wOy8bWZtpyyniptrD4blhCQfy/FllR+lw484uzXktTOVuQzo2z1QfUR",
	"YkeI/UOktZvQbhiyPjkYkL0V2ej2v8sbjEj71Xj9xTcmRqd/hL8/utNfYJAV/IwnZBXwmI/H/vxebjg9",
	"m4alhIXpI7HHe3vqU2gbysXxoXvo7sEY791P1R5NZ6oXpnDKuFkynpVQZ5XBk6b3dXDxbBgKrKWZxmjq",
	"fmR9rHx6AzfzGu48V/z+8R8BAAD//0o/osR7nwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
