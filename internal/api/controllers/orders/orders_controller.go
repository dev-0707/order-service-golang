// Package orders provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package orders

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/orders)
	Getorders(c *gin.Context, params GetordersParams)

	// (POST /api/v1/orders)
	CreateOrder(c *gin.Context)

	// (DELETE /api/v1/orders/{orderId})
	DeleteOrder(c *gin.Context, orderId string)

	// (GET /api/v1/orders/{orderId})
	GetOrderById(c *gin.Context, orderId string)

	// (PUT /api/v1/orders/{orderId})
	UpdateOrder(c *gin.Context, orderId int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Getorders operation middleware
func (siw *ServerInterfaceWrapper) Getorders(c *gin.Context) {

	var err error

	c.Set(Oauth2Scopes, []string{"read:orders"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetordersParams

	// ------------- Optional query parameter "accept_language" -------------

	err = runtime.BindQueryParameter("form", true, false, "accept_language", c.Request.URL.Query(), &params.AcceptLanguage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter accept_language: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "comment" -------------

	err = runtime.BindQueryParameter("form", true, false, "comment", c.Request.URL.Query(), &params.Comment)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter comment: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Getorders(c, params)
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(c *gin.Context) {

	c.Set(Oauth2Scopes, []string{"write:orders"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrder(c)
}

// DeleteOrder operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", c.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Oauth2Scopes, []string{"write:orders"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrder(c, orderId)
}

// GetOrderById operation middleware
func (siw *ServerInterfaceWrapper) GetOrderById(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", c.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Oauth2Scopes, []string{"read:orders"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrderById(c, orderId)
}

// UpdateOrder operation middleware
func (siw *ServerInterfaceWrapper) UpdateOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", c.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Oauth2Scopes, []string{"write:orders"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateOrder(c, orderId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/orders", wrapper.Getorders)
	router.POST(options.BaseURL+"/api/v1/orders", wrapper.CreateOrder)
	router.DELETE(options.BaseURL+"/api/v1/orders/:orderId", wrapper.DeleteOrder)
	router.GET(options.BaseURL+"/api/v1/orders/:orderId", wrapper.GetOrderById)
	router.PUT(options.BaseURL+"/api/v1/orders/:orderId", wrapper.UpdateOrder)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"y+Vdp3jQZPtl++8AAAD//6fKHd2FPwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
