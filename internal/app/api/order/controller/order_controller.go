// Package order provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package order

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Submit order
	// (POST /api/v1/orders)
	CreateOrder(c *gin.Context)
	// Get order by id
	// (GET /api/v1/orders/{orderId})
	GetById(c *gin.Context, orderId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrder(c)
}

// GetById operation middleware
func (siw *ServerInterfaceWrapper) GetById(c *gin.Context) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", c.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orderId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetById(c, orderId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/orders", wrapper.CreateOrder)
	router.GET(options.BaseURL+"/api/v1/orders/:orderId", wrapper.GetById)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/jNhD9K8S0QC7KSvYmbaCb0/2Ai226aBboIfCBkSY2txKpkCN3BcP/vRhS/tAH",
	"EqPdFsUiJ5vi8PHNm5knbSAzZWU0anKQbsBlKyyl//uTRUn4q83RviHDTyprKrSk0O9ntSNTop3nvMIv",
	"sqwKhHSSTC+vfoyglF8+oF7Sih9FUCq9X0ZATYWQgiOr9BK2ERRKB1RFWPo/31t8gBS+iw8E45Zd7El9",
	"UBqZ2HYPJ62VDURQa/VY4zwgka1xe4gx958xIz701lpjR9IyOXYTGqGbI0lVuE7cHfyinFN6KYwV2pBY",
	"y0Ll4p3CIhdnD/xzI0ucnEF0WuT0DBbRQZABiWezjqBE5+Ry2U0IZlogJy+UEybLamsxh0GW2wgsPtaK",
	"N9O7oMsOEZnZQNEnesX30htJPSbTZJqcT5LzySVE8GBsKQlSyDluRPUnOu7/1nAROJJUdzsEKtQ53z+m",
	"9biauzsHilbW5HVGPSngY3g8gY4er5/X47GWmhQ1/dbfF0Vp+uHiwFxpwiXaMeqcPGa1VdTcsn6B8D1K",
	"i3ZWM4Hd6t0O/OffP0EUzIeRwu7hshVRBVsGVvrBhCnVJDOCdOOn0WVWVaSMhjToJm7RrlWG4lz89vb2",
	"k5h9nDOcIq/SEyFrtC7gTF4lrxKWxlSoZaUghdf+UQSVpJVPKpaViteT2DBgqItxzKrH6ba+LxUJjX8K",
	"Hwoe1Ure5hIemy2EuUNH1yZvdsmi9rCyqgqV+XPxZ8fYO89+roV7du7V7JK8OWJ3mPy2nS26ymgXajlN",
	"Jv8hr1CtYCE5F+QiSU64ft/F3tNVxoXnk969SS4LZf410259l2+Aa5mLtqCRqAqUDkW2wuwPITXvkG04",
	"qdPUCi+tEZFOvOXipMqNSzeBbmI3hoSsaYWaGCDU5h+mwZizPubl3673pa/3MemZFmxdVstCOLRr7LwF",
	"99J9rbLMe3dhGxiBq8tS2uZgDrvRI7l03JhhveDYrs3EG/87z7dMa4kjfvMeWzxx3wiVD+zmPdJ1M8+9",
	"lVlZInn3utuMTp6PU7xm34MItPQu3bIYuMWxaP333GLgJMlXc5JnPeTFO1684xvzjuGgD+zj6HPMj/jx",
	"h9jdgicy4AcDqG3RfnClcVyYTBYr4yi9Sq6S1oWAj7S3jBqG61mEg+1i+1cAAAD//0N8oMxpDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
